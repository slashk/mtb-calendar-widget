// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

function loadPreferences() {
	var preferenceForKey = "region";	// replace with the key for a preference
	preferenceForKey = widget.preferenceForKey(widget.identifier + "-" + preferenceForKey);
}

function savePreferences(pref) {
	var preferenceKey = "region";		// replace with the key for a preference
	var preferenceValue = pref;	// replace with a preference to save
	widget.setPreferenceForKey(preferenceValue, widget.identifier + "-" + preferenceKey);
}

function parseRaces(events) {
    var outputHTML = ""; 
    var baseurl = "http://www.mtbcalendar.com/events/"
    for (var i=0; i<events.length; i++){ 
        var splitdate = events[i].start_date.split("/");
        var newdate = splitdate[1]+'/'+splitdate[2]+'/'+splitdate[0].replace(/^20/,""); // gives us 01/15/09 format
		var url = baseurl + events[i].id + '-' + events[i].permalink;
        outputHTML += (newdate+': <a href="' + url + '">' + events[i].name+'</a> ('+events[i].state+')<br />'); 
    }

	// updating scrollarea
	document.getElementById("content").innerHTML = outputHTML;
	document.getElementById("scrollArea").object.refresh();
}

// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest) 
{
	if (xmlRequest.status == 200) {
		// Parse and interpret results
		// XML results found in xmlRequest.responseXML
		// Text results found in xmlRequest.reponseText
		events = ( "(" + xmlRequest.responseText + ")" ).evalJSON();
		parseRaces(events);
	}
	else {
		alert("Error fetching data: HTTP status " + xmlRequest.status);
	}
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
	feedURL = loadPreferences();
	if (!feedURL) {
		feedURL = "http://www.mtbcalendar.com/tags/norcal.json";
		savePreferences("http://www.mtbcalendar.com/tags/norcal.json")
	}
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

	// refresh front content with new 
	if (popup.value != (widget.preferenceForKey(widget.identifier + "-" + "region"))) {
		widget.setPreferenceForKey(document.getElementById("popup").value, widget.identifier + "-" + "region");
		feedURL = popup.value;
		xmlLoaded(xmlRequest);
		// XMLHttpRequest setup code
		//var xmlRequest = new XMLHttpRequest();
		xmlRequest.onload = onloadHandler;
		xmlRequest.open("GET", feedURL);
		xmlRequest.setRequestHeader("Cache-Control", "no-cache");
		xmlRequest.send(null);
	}
	
    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

// Values you provide
var regionPopUp = document.getElementById("popup");	// replace with ID of popup
if (!regionPopUp) {
	feedURL = "http://www.mtbcalendar.com/tags/norcal.json";
} else {
	feedURL = region.value;
}

var onloadHandler = function() { xmlLoaded(xmlRequest); };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet

// XMLHttpRequest setup code
var xmlRequest = new XMLHttpRequest();
xmlRequest.onload = onloadHandler;
xmlRequest.open("GET", feedURL);
xmlRequest.setRequestHeader("Cache-Control", "no-cache");
xmlRequest.send(null);
