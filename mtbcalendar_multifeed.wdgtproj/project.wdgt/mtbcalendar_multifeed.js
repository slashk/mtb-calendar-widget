// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

var feedURL = "";
var onloadHandler = function() { xmlLoaded(xmlRequest); };
var xmlRequest = null;
var lastUpdated = 0;       // Track last refresh time to avoid excessive updates
//var popup;

function loadPreferences(key) {
	return widget.preferenceForKey(widget.identifier + "-" + key);
}

function savePreferences(key, value) {
	widget.setPreferenceForKey(value, widget.identifier + "-" + key);
}

// takes event array and convert them to text/html for the scrollArea
function parseEvents(events) {
    var outputHTML = "";
    var splitdate = "";
    var baseurl = "http://www.mtbcalendar.com/events/";
    var eventTemplate = new Template('#{newDate}: <span onclick=\'widget.openURL("#{calendarURL}")\'>#{name}</span> (#{state})<br />');

    if (events.length > 0) {
        events.each(function(event) {
            splitdate = event.start_date.split("/");
            // gives us 01/15/09 format
            event.newDate = splitdate[1]+'/'+splitdate[2]+'/'+splitdate[0].replace(/^20/,""); 
            event.calendarURL = baseurl + event.id + '-' + event.permalink;
            outputHTML += eventTemplate.evaluate(event);         
        });
    } else {
        outputHTML = "No upcoming events. Visit <span style=\"color:red;\" onclick=\'widget.openURL(\"http://www.mtbcalendar.com\")\'>MTB Calendar</span> and add your events.";
    }
    
	// updating scrollarea
	$("content").innerHTML = outputHTML;
	$("scrollArea").object.refresh();
}

// update preferences and front page regionName on change
function updateRegionChoice() {
    savePreferences("region", popup.value);
    $("regionName").innerHTML = popup[popup.selectedIndex].text;
    feedURL = popup.value;
    refreshEvents();
}

// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest) 
{
	if (xmlRequest.status == 200) {
		events = ( "(" + xmlRequest.responseText + ")" ).evalJSON();
		parseEvents(events);
	}
	else {
		alert("Error fetching data: HTTP status " + xmlRequest.status);
		alert("Feed is " + feedURL);
	}
}

// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
function load()
{
    setupParts();
    refreshEvents;
}

function refreshEvents () {
	if (feedURL == "") {
		savePreferences("region", "http://www.mtbcalendar.com/tags/norcal.json?future=1");
		feedURL = loadPreferences("region");
        popup.value = feedURL;
        $("regionName").innerHTML = popup[popup.selectedIndex].text;
	}
    xmlRequest = new XMLHttpRequest();
    xmlLoaded(xmlRequest);
    xmlRequest.onload = onloadHandler;
    xmlRequest.open("GET", feedURL);
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.send(null);
}

// Function: remove()
// Called when the widget has been removed from the Dashboard
function remove()
{
     // Remove any preferences as needed
    widget.setPreferenceForKey(null, widget.identifier + "-" + "region");
}

// Function: hide()
// Called when the widget has been hidden
function hide()
{
    // Stop any timers to prevent CPU usage
}

// Function: show()
// Called when the widget has been shown
function show()
{
    // Refresh feed if 15 minutes have passed since the last update
    var now = (new Date).getTime();
    if ((now - lastUpdated) > 15 * 60 * 1000) {
        refreshEvents();
    }

}

// Function: sync()
// Called when the widget has been synchronized with .Mac
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
function showBack(event)
{
    var front = $("front");
    var back = $("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    popup.value = loadPreferences("region");

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
function showFront(event)
{
    var front = $("front");
    var back = $("back");
    
    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}